#+STARTUP: overview

* Interface tweeks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
	visible-bell nil)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)

  (global-display-line-numbers-mode 1)

  ;;(load-theme 'deeper-blue nil)

  (blink-cursor-mode 1)
  (global-hl-line-mode 1)

  ;; remember  the recent open files
  (recentf-mode 1)

  ;; Save what you enter into minibuffer prompts
  (setq histroy-lenghth 25)
  (savehist-mode 1)

  ;; remember and restor the last cursur location of opened files
  (save-place-mode 1)
  ;; Don't pop up UI dialog when prompting
  (setq use-dialog-box nil)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)


  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  (defalias 'list-buffers 'ibuffer)
  (windmove-default-keybindings)

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;; expand the region around the cursure
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region)
    )

  (setq save-interprogram-paste-before-kill t)

#+end_src

#+RESULTS:
: revert-buffer

* Package management
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

* try
try package without installing 
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

* Which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

* Theme customizations
The selected them and customizations
#+begin_src emacs-lisp
  (setq modus-themes-mode-line '(accented borderless padded)
	 modus-themes-region '(accented)
	 modus-themes-completions 'opinionated
	 modus-themes-bold-constructs t
	 modus-themes-italic-constructs t
	 modus-themes-fringes 'subtle
	 modus-themes-tabs-accented t     
	 modus-themes-paren-match '(bold faint)
	 modus-themes-prompts '(bold intense)
	 modus-themes-headings '((1 . (rainbow background 1.4))
				(2 . (rainbow background 1.3))
				(3 . (rainbow background 1.2))
				(t . (rainbow 1.1)))

	 modus-themes-scale-headings t
	 modus-themes-org-blocks 'tinted-background
	 )
  (load-theme 'modus-vivendi t)
#+end_src

* Org mode Stuff
the org mode customizations
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (custom-set-variables
   '(org-directoy "~/orgFiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-startup-folted (quote overview))
   '(org-hide-leading-stars t)
   '(org-startup-indented t)
   )
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-Cc" 'org-capture)

#+end_src

* Counsel, ivy , swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))


  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind ( ("C-s" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("<f6>" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file)
	    ("<f1> f" . counsel-describe-function)
	    ("<f1> v" . counsel-describe-variable)
	    ("<f1> o" . counsel-describe-symbol)
	    ("<f1> l" . counsel-find-library)
	    ("<f2> i" .  counsel-info-lookup-symbol)
	    ("<f2> u" . counsel-unicode-char)
	    ("C-c g" . counsel-git)
	    ("C-c j" . counsel-git-grep)
	    ("C-c k" . counsel-ag)
	    ("C-x l" . counsel-locate)
	    ("C-S-o" . counsel-rhythmbox)
	    ("C-r" . counsel-minibuffer-history)
	    )
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    ;   (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+end_src
* Company(auto complete)
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-backends '((company-capf company-etags company-dabbrev-code )))
    (global-company-mode t)
    (setq company-tooltip-align-annotations t)
    )
#+end_src

* Haskell
#+begin_src emacs-lisp

    (use-package haskell-mode
      :ensure t
      :init
      (setenv "PATH"
	    (concat "/home/platoali/.ghcup/bin/" path-separator (getenv "PATH")))
      :config
      (lsp)
      )

    (use-package dap-mode
      :ensure t)
    ;(use-package dap-haskell)

#+end_src

* lsp
Language server protocol
#+begin_src  emacs-lisp

    (use-package lsp-mode
      :ensure t
      :init
      (setq lsp-keymap-prefix "C-c l")
      (setenv "PATH"
	    (concat "/home/platoali/.ghcup/bin/" path-separator (getenv "PATH")))
      :hook (
	     (haskell-mod . lsp)
	     )
      :commands lsp 
      )

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode

      )

    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)
#+end_src

* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    )
  (use-package yasnippet-snippets
    :ensure t
    )
  (use-package haskell-snippets
    :ensure t
    )
#+end_src

* COMMENT org-reveal
convert an org file to the html presentation
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :init
    (setq org-reveal-root "http://cdn.jsdeliver.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )

#+end_src

* COMMENT Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+end_src

* Web Mode (unfinished, untested)
#+begin_src emacs-lisp
  (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
      (setq web-mode-enable-auto-closing t)
     )
  (use-package company-web
    :ensure t
    :config
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim)
    )


#+end_src

#+RESULTS:
: t

* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (projectile-register-project-type 'stack '("stack.yaml")
                                  :project-file "stack.yaml"
				  :compile "stack build"
				  :test "stack  test"
				  :run "stack run"
				  :test-dir "test/")
    )
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode t))

  (use-package smartparens
    :ensure ;TODO: 
    :hook (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+end_src

#+RESULTS:
: t

* Check if everything is OK
#+begin_src emacs-lisp
    (hl-line-mode 1)
#+end_src




